원시 타입은 값 자체로써 변수에 저장되고 복사 된다.
객체 타입은 참조값을 통해 변수에 저장되고 복사된다.

let p1 = 1;
let p2 = p1;
p2 = 2; 

let p1 = 1 : 위 코드의 동작 과정은 메모리에 1이라는 값이 하나 생기고 p1이 거기를 가리키고 있음
let p2 = p1 : 메모리는 p1이 가리키는 값인 1이 하나 생기고 p2가 거기를 가리키게됨
p2 = 2  : 2라는 값이 메모리에 올라가고 p2가 거기를 가리킴
-> 실제 메모리의 값은 수정되지 않고 2가 새로 생기게 되는거임 
-> 1은 안없어짐
-> 원시타입의 값은 저장 복사 변경 되는 값은 메모리에 한 번 저장되는 원본 데이터가 수정되지는 않음 = 불변값 이라고 부름
-> 원시 타입 = 불변값 (원본 데이터가 변하지 않는)



let o1 = {name: '홍길동'};
let o2 = o1;
o2.name = "길동홍";

let o1 = {name: '홍길동'} : 메모리 어딘가에 {name: '홍길동'} 객체를 저장해둔 다음 변수 o1에는 객체 값을 가리키는 주소값이 저장된 참조값이 메모리에 저장이 되는데 여기를 가리키게됨
-> 저장 하는 값이 동적으로 변하기 떄문에 주소를 따로 보관하는 것임

let o2 = o1 :  o2도 o1이 가리키는 참조값을 가리킴

o2.name = "홍동길" : 같은 곳을 가리키기 때문에 원본 데이터가 바뀌어버림
-> o1의 값도 함께 변해버림 
-> 객체 타입 = 가변값


* 객체를 복사할 때는 
let o1 = {name: '홍길동'};
let o2 = {...o1};
-> 이렇게 spread 연산자로 안에 프로퍼티를 전부 가져와 복사해줘야함.


* 객체간의 비교는 기본적으로 참조값을 기준으로 이루어진다.
- JSON.stringify(o1) === JSON.stringify(o3) -> 깊은 비교, 객체를 문자열로 변환해서 프로퍼티값을 기준으로 비교하게함.
